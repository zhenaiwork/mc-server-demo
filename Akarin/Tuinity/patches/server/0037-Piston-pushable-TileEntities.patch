From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sun, 14 Jun 2020 00:34:47 -0700
Subject: [PATCH] Piston pushable TileEntities

Configurable under pistons-can-push-tile-entities, globally.
Defaults to false because some redstone machines are going to rely on
TE's not being pushable.

Explicitly disabled blocks & their reasons can be found under their override
of the function TileEntity#isPushable.
Other disabled blocks are due to the underlying block material not being
pushable (in general, a TE is pushable if its underlying material is).

Video demonstration:
https://www.youtube.com/watch?v=Q0dYMtZ-a5c

diff --git a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
index 0e797adfa135fd26a8966cecf02ff36b83b0bb70..1ae1fd7505d14874ddfc7b86919fac00cdb44ce3 100644
--- a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
+++ b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
@@ -133,6 +133,12 @@ public final class TuinityConfig {
         lagCompensateBlockBreaking = TuinityConfig.getBoolean("lag-compensate-block-breaking", true);
     }
 
+    public static boolean pistonsCanPushTileEntities;
+
+    private static void pistonsCanPushTileEntities() {
+        pistonsCanPushTileEntities = TuinityConfig.getBoolean("pistons-can-push-tile-entities", false);
+    }
+
     public static final class WorldConfig {
 
         public final String worldName;
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 72fb92f7c379cb84425b6b03ddf8aad29388c0ae..8688ff0f8fb1e0abecff0dc0d21d8d2b16cf41d2 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -10,7 +10,7 @@ import javax.annotation.Nullable;
 public class BlockChest extends BlockChestAbstract<TileEntityChest> implements IBlockWaterlogged {
 
     public static final BlockStateDirection FACING = BlockFacingHorizontal.FACING;
-    public static final BlockStateEnum<BlockPropertyChestType> c = BlockProperties.ay;
+    public static final BlockStateEnum<BlockPropertyChestType> c = BlockProperties.ay; public static final BlockStateEnum<BlockPropertyChestType> getChestTypeEnum() { return BlockChest.c; } // Tuinity - OBFHELPER
     public static final BlockStateBoolean d = BlockProperties.C;
     protected static final VoxelShape e = Block.a(1.0D, 0.0D, 0.0D, 15.0D, 14.0D, 15.0D);
     protected static final VoxelShape f = Block.a(1.0D, 0.0D, 1.0D, 15.0D, 14.0D, 16.0D);
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 73ac83832121e0390b7c4649681fc247e3d8c30b..8312ed7797eb508ed36eb73c94693a6d87e18938 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -279,8 +279,10 @@ public class BlockPiston extends BlockDirectional {
                 } else if ((Boolean) iblockdata.get(BlockPiston.EXTENDED)) {
                     return false;
                 }
-
-                return !block.isTileEntity();
+                // Tuinity start - pushable TE's
+                TileEntity tileEntity;
+                return !block.isTileEntity() || ((tileEntity = world.getTileEntity(blockposition)) != null && tileEntity.isPushable());
+                // Tuinity end - pushable TE's
             } else {
                 return false;
             }
@@ -377,7 +379,7 @@ public class BlockPiston extends BlockDirectional {
 
             for (k = list.size() - 1; k >= 0; --k) {
                 // Paper start - fix a variety of piston desync dupes
-                boolean allowDesync = com.destroystokyo.paper.PaperConfig.allowPistonDuplication;
+                boolean allowDesync = com.destroystokyo.paper.PaperConfig.allowPistonDuplication && !list1.get(k).getBlock().isTileEntity(); // Tuinity - pushable TE's
                 BlockPosition oldPos = blockposition3 = (BlockPosition) list.get(k);
                 iblockdata1 = allowDesync ? world.getType(oldPos) : null;
                 // Paper end - fix a variety of piston desync dupes
@@ -389,10 +391,29 @@ public class BlockPiston extends BlockDirectional {
                     iblockdata1 = world.getType(oldPos);
                     map.replace(oldPos, iblockdata1);
                 }
-                world.setTileEntity(blockposition3, BlockPistonMoving.a(allowDesync ? list1.get(k) : iblockdata1, enumdirection, flag, false));
+                // Tuinity start - pushable TE's
+                TileEntity tileEntity = world.getTileEntity(oldPos);
+                if (tileEntity != null) {
+                    if (!tileEntity.isPushable()) {
+                        tileEntity = null;
+                    } else {
+                        // ensure the death of world tied state
+                        if (tileEntity instanceof IInventory) {
+                            MCUtil.closeInventory((IInventory)tileEntity, org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE);
+                        }
+                        if (tileEntity instanceof TileEntityLectern) {
+                            MCUtil.closeInventory(((TileEntityLectern)tileEntity).inventory, org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE);
+                        }
+
+                        // now copy
+                        tileEntity = tileEntity.createCopyForPush((WorldServer)world, oldPos, blockposition3, iblockdata1);
+                    }
+                }
+                // Tuinity end - pushable TE's
                 if (!allowDesync) {
-                    world.setTypeAndData(oldPos, Blocks.AIR.getBlockData(), 2 | 4 | 16 | 1024); // set air to prevent later physics updates from seeing this block
+                    world.setTypeAndDataRaw(oldPos, Blocks.AIR.getBlockData(), null); // Tuinity - don't fire logic for removing the old block
                 }
+                world.setTileEntity(blockposition3, BlockPistonMoving.createPistonTile(allowDesync ? list1.get(k) : iblockdata1, enumdirection, flag, false, tileEntity)); // Tuinity - pushable TE's
                 // Paper end - fix a variety of piston desync dupes
                 --j;
                 aiblockdata[j] = iblockdata1;
diff --git a/src/main/java/net/minecraft/server/BlockPistonMoving.java b/src/main/java/net/minecraft/server/BlockPistonMoving.java
index 809ee9f9a69d86d891d25efa04b1af4d5f04f185..805fc6b8827afac2a84c52cc442798e030061c30 100644
--- a/src/main/java/net/minecraft/server/BlockPistonMoving.java
+++ b/src/main/java/net/minecraft/server/BlockPistonMoving.java
@@ -21,7 +21,12 @@ public class BlockPistonMoving extends BlockTileEntity {
     }
 
     public static TileEntity a(IBlockData iblockdata, EnumDirection enumdirection, boolean flag, boolean flag1) {
-        return new TileEntityPiston(iblockdata, enumdirection, flag, flag1);
+        // Tuinity start - add tileEntity parameter
+        return createPistonTile(iblockdata, enumdirection, flag, flag1, null);
+    }
+    public static TileEntity createPistonTile(IBlockData iblockdata, EnumDirection enumdirection, boolean flag, boolean flag1, TileEntity tileEntity) {
+        return new TileEntityPiston(iblockdata, enumdirection, flag, flag1, tileEntity);
+        // Tuinity end - add tileEntity parameter
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 1c5137632ae78da6790664275dbf16be9435f54c..5a360fdca93c6e5b94963c6ca3ff66315c265edf 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -509,8 +509,35 @@ public class Chunk implements IChunkAccess {
         return this.setType(blockposition, iblockdata, flag, true);
     }
 
+    // Tuinity start
+    final void setTypeAndDataRaw(BlockPosition blockposition, IBlockData iblockdata) {
+        // copied from setType
+        int i = blockposition.getX() & 15;
+        int j = blockposition.getY();
+        int k = blockposition.getZ() & 15;
+        ChunkSection chunksection = this.sections[j >> 4];
+
+        if (chunksection == Chunk.a) {
+            if (iblockdata.isAir()) {
+                return;
+            }
+
+            chunksection = new ChunkSection(j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray - Add parameters
+            this.sections[j >> 4] = chunksection;
+        }
+
+        chunksection.setType(i, j & 15, k, iblockdata);
+    }
+    // Tuinity end
+
     @Nullable
     public IBlockData setType(BlockPosition blockposition, IBlockData iblockdata, boolean flag, boolean doPlace) {
+        // Tuinity start - add tileEntity parameter
+        return this.setType(blockposition, iblockdata, flag, doPlace, null);
+    }
+    @Nullable
+    public IBlockData setType(BlockPosition blockposition, IBlockData iblockdata, boolean flag, boolean doPlace, TileEntity newTileEntity) {
+        // Tuinity end - add tileEntity parameter
         // CraftBukkit end
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
@@ -569,6 +596,10 @@ public class Chunk implements IChunkAccess {
                 }
 
                 if (block instanceof ITileEntity) {
+                    // Tuinity start - add tileEntity parameter
+                    if (newTileEntity != null) {
+                        this.world.setTileEntity(blockposition, newTileEntity);
+                    } else { // Tuinity end - add tileEntity parameter
                     tileentity = this.a(blockposition, Chunk.EnumTileEntityState.CHECK);
                     if (tileentity == null) {
                         tileentity = ((ITileEntity) block).createTile(this.world);
@@ -576,6 +607,7 @@ public class Chunk implements IChunkAccess {
                     } else {
                         tileentity.invalidateBlockCache();
                     }
+                    } // Tuinity - add tileEntity parameter
                 }
 
                 this.s = true;
diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index 87d58002116f361d8255d79fc0dbd1200f442168..973bdd25ca45ee6a11803e3abb8c0ff22d658554 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -48,6 +48,20 @@ public final class MCUtil {
         new ThreadFactoryBuilder().setNameFormat("Paper Object Cleaner").build()
     );
 
+    // Tuinity start
+    private static org.bukkit.entity.HumanEntity[] EMPTY_HUMAN_ARRAY = new org.bukkit.entity.HumanEntity[0];
+    public static void closeInventory(IInventory inventory, org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        List<org.bukkit.entity.HumanEntity> viewers = inventory.getViewers();
+        if (viewers.isEmpty()) {
+            return;
+        }
+
+        for (org.bukkit.entity.HumanEntity viewer : viewers.toArray(EMPTY_HUMAN_ARRAY)) {
+            viewer.closeInventory(reason);
+        }
+    }
+    // Tuinity end
+
     public static final long INVALID_CHUNK_KEY = getCoordinateKey(Integer.MAX_VALUE, Integer.MAX_VALUE);
 
 
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index a8e64dfdab1e73894144a65c10c15d22f9198d3d..652ad383ab581cea79c357e8a3e71b529d2d5447 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -12,7 +12,7 @@ import org.bukkit.inventory.InventoryHolder;
 import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
-public abstract class TileEntity implements KeyedObject { // Paper
+public abstract class TileEntity implements KeyedObject, Cloneable { // Paper // Tuinity
 
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
@@ -27,7 +27,7 @@ public abstract class TileEntity implements KeyedObject { // Paper
     protected BlockPosition position;
     protected boolean f;
     @Nullable
-    private IBlockData c;
+    private IBlockData c; protected final IBlockData getBlockDataCache() { return this.c; } public final void setBlockDataCache(final IBlockData value) { this.c = value; } // Tuinity - OBFHELPER
     private boolean g;
 
     public TileEntity(TileEntityTypes<?> tileentitytypes) {
@@ -35,6 +35,51 @@ public abstract class TileEntity implements KeyedObject { // Paper
         this.tileType = tileentitytypes;
     }
 
+    // Tuinity start - pushable TE's
+    public boolean isPushable() {
+        if (!com.tuinity.tuinity.config.TuinityConfig.pistonsCanPushTileEntities) {
+            return false;
+        }
+        IBlockData block = this.getBlock();
+        if (this.isRemoved() || !this.tileType.isValidBlock(block.getBlock())) {
+            return false;
+        }
+        EnumPistonReaction reaction = block.getPushReaction();
+        return reaction == EnumPistonReaction.NORMAL || reaction == EnumPistonReaction.PUSH_ONLY;
+    }
+
+    @Override
+    protected final TileEntity clone() {
+        try {
+            return (TileEntity)super.clone();
+        } catch (final Throwable thr) {
+            if (thr instanceof ThreadDeath) {
+                throw (ThreadDeath)thr;
+            }
+            throw new InternalError(thr);
+        }
+    }
+
+    // this method presumes the old TE has been completely dropped from worldstate and has no ties to it anymore (this
+    // includes players interacting with them)
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        final TileEntity copy = this.clone();
+
+        copy.world = world;
+        copy.position = newPos;
+
+        // removed is manually set to false after placing the entity into the world.
+        copy.setBlockDataCache(blockData);
+
+        return copy;
+    }
+
+    // updates TE state to its new position
+    public void onPostPush() {
+        this.update();
+    }
+    // Tuinity end - pushable TE's
+
     // Paper start
     private String tileEntityKeyString = null;
     private MinecraftKey tileEntityKey = null;
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index df2d6c3b070c2fc106fa2942959ef21b3511f0ee..9780ee07b2b0eed0cab5057ca02a48b244e3767b 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -35,7 +35,7 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
     @Nullable
     public IChatBaseComponent customName;
     public ChestLock chestLock;
-    private final IContainerProperties containerProperties;
+    private IContainerProperties containerProperties; // Tuinity - need non-final for `createCopyForPush`
     // CraftBukkit start - add fields and methods
     public PotionEffect getPrimaryEffect() {
         return (this.primaryEffect != null) ? CraftPotionUtil.toBukkit(new MobEffect(this.primaryEffect, getLevel(), getAmplification(), true, true)) : null;
@@ -46,10 +46,10 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
     }
     // CraftBukkit end
 
-    public TileEntityBeacon() {
-        super(TileEntityTypes.BEACON);
-        this.chestLock = ChestLock.a;
-        this.containerProperties = new IContainerProperties() {
+    // Tuinity start - pushable TE's
+    protected final IContainerProperties getNewContainerProperties() {
+        // moved from constructor - this should be re-copied if it changes
+        return new IContainerProperties() {
             @Override
             public int getProperty(int i) {
                 switch (i) {
@@ -90,6 +90,22 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
         };
     }
 
+    @Override
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        TileEntityBeacon copy = (TileEntityBeacon)super.createCopyForPush(world, oldPos, newPos, blockData);
+
+        copy.containerProperties = copy.getNewContainerProperties(); // old properties retains reference to old te
+
+        return copy;
+    }
+    // Tuinity end - pushable TE's
+
+    public TileEntityBeacon() {
+        super(TileEntityTypes.BEACON);
+        this.chestLock = ChestLock.a;
+        this.containerProperties = this.getNewContainerProperties(); // Tuinity - move into function
+    }
+
     @Override
     public void tick() {
         int i = this.position.getX();
diff --git a/src/main/java/net/minecraft/server/TileEntityBeehive.java b/src/main/java/net/minecraft/server/TileEntityBeehive.java
index 417152d16ca48c008eb6c4159e79ce9b8eb42c46..42374183b330d8af6f4ecd66d46e4e05acd605db 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeehive.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeehive.java
@@ -12,6 +12,13 @@ public class TileEntityBeehive extends TileEntity implements ITickable {
     public BlockPosition flowerPos = null;
     public int maxBees = 3; // CraftBukkit - allow setting max amount of bees a hive can hold
 
+    // Tuinity start - pushable TE's
+    @Override
+    public boolean isPushable() {
+        return false; // TODO until there is a good solution to making the already existing bees in the world re-acquire this position, this cannot be done.
+    }
+    // Tuinity end - pushable TE's
+
     public TileEntityBeehive() {
         super(TileEntityTypes.BEEHIVE);
     }
diff --git a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
index 441157cf7fc944048d33617dd4da7b9be406a1a4..438d14dd2365bfaf55fd535b23e8d264afb0bab3 100644
--- a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
+++ b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
@@ -24,7 +24,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements IWorl
     private boolean[] j;
     private Item k;
     public int fuelLevel;
-    protected final IContainerProperties a;
+    protected IContainerProperties a; protected final void setContainerProperties(IContainerProperties value) { this.a = value; } // Tuinity - OBFHELPER // Tuinity - need non-final for `createCopyForPush`
     // CraftBukkit start - add fields and methods
     private int lastTick = MinecraftServer.currentTick;
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -56,10 +56,10 @@ public class TileEntityBrewingStand extends TileEntityContainer implements IWorl
     }
     // CraftBukkit end
 
-    public TileEntityBrewingStand() {
-        super(TileEntityTypes.BREWING_STAND);
-        this.items = NonNullList.a(5, ItemStack.a);
-        this.a = new IContainerProperties() {
+    // Tuinity start - pushable TE's
+    protected final IContainerProperties getNewContainerProperties() {
+        // moved from constructor - this should be re-copied if it changes
+        return new IContainerProperties() {
             @Override
             public int getProperty(int i) {
                 switch (i) {
@@ -91,6 +91,22 @@ public class TileEntityBrewingStand extends TileEntityContainer implements IWorl
         };
     }
 
+    @Override
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        TileEntityBrewingStand copy = (TileEntityBrewingStand)super.createCopyForPush(world, oldPos, newPos, blockData);
+
+        copy.setContainerProperties(copy.getNewContainerProperties()); // old properties retains reference to old te
+
+        return copy;
+    }
+    // Tuinity end - pushable TE's
+
+    public TileEntityBrewingStand() {
+        super(TileEntityTypes.BREWING_STAND);
+        this.items = NonNullList.a(5, ItemStack.a);
+        this.a = this.getNewContainerProperties();
+    }
+
     @Override
     protected IChatBaseComponent getContainerName() {
         return new ChatMessage("container.brewing", new Object[0]);
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 9a5f2da8c073f9b249edac98b0990615a9efb0e2..50a8d59da6df62f0ec7158d563fe7a8517a61847 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -45,6 +45,22 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
     }
     // CraftBukkit end
 
+    // Tuinity start
+    @Override
+    public boolean isPushable() {
+        if (!super.isPushable()) {
+            return false;
+        }
+        // what should happen when a double chest is moved is generally just a mess to deal with in the current
+        // codebase.
+        IBlockData type = this.getBlock();
+        if (type.getBlock() == Blocks.CHEST || type.getBlock() == Blocks.TRAPPED_CHEST) {
+            return type.get(BlockChest.getChestTypeEnum()) == BlockPropertyChestType.SINGLE;
+        }
+        return false;
+    }
+    // Tuinity end
+
     protected TileEntityChest(TileEntityTypes<?> tileentitytypes) {
         super(tileentitytypes);
         this.items = NonNullList.a(27, ItemStack.a);
diff --git a/src/main/java/net/minecraft/server/TileEntityConduit.java b/src/main/java/net/minecraft/server/TileEntityConduit.java
index 07f265b299fe352e26d94f9932a5a91bd1933638..34c191d769816c9ca14d2c6f4dc19316ea3d267a 100644
--- a/src/main/java/net/minecraft/server/TileEntityConduit.java
+++ b/src/main/java/net/minecraft/server/TileEntityConduit.java
@@ -16,15 +16,32 @@ public class TileEntityConduit extends TileEntity implements ITickable {
     private static final Block[] b = new Block[]{Blocks.PRISMARINE, Blocks.PRISMARINE_BRICKS, Blocks.SEA_LANTERN, Blocks.DARK_PRISMARINE};
     public int a;
     private float c;
-    private boolean g;
+    private boolean g; private final void setActive(boolean value) { this.g = value; } // Tuinity - OBFHELPER
     private boolean h;
-    private final List<BlockPosition> i;
+    private final List<BlockPosition> i; private final List<BlockPosition> getPositionsActivating() { return this.i; } // Tuinity - OBFHELPER
     @Nullable
     private EntityLiving target;
     @Nullable
     private UUID k;
     private long l;
 
+    // Tuinity start - make TE's pushable
+    @Override
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        final TileEntityConduit copy = (TileEntityConduit)super.createCopyForPush(world, oldPos, newPos, blockData);
+
+        // the following states need to be re-calculated
+        copy.getPositionsActivating().clear();
+        copy.setActive(false);
+        copy.target = null;
+        // also set our state because the copy and this share the same activating block list
+        this.setActive(false);
+        this.target = null;
+
+        return copy;
+    }
+    // Tuinity end - make TE's pushable
+
     public TileEntityConduit() {
         this(TileEntityTypes.CONDUIT);
     }
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index d5432bfeb727baadd8614384d3e50314de5f8dc4..7d50b7056acba77c278fab9cc310ab269a79a653 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -30,14 +30,14 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
     public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
     public int cookTime;
     public int cookTimeTotal;
-    protected final IContainerProperties b;
+    protected IContainerProperties b; protected final void setContainerProperties(IContainerProperties value) { this.b = value; } // Tuinity - OBFHELPER // Tuinity - need non-final for `createCopyForPush`
     private final Map<MinecraftKey, Integer> n;
     protected final Recipes<? extends RecipeCooking> c;
 
-    protected TileEntityFurnace(TileEntityTypes<?> tileentitytypes, Recipes<? extends RecipeCooking> recipes) {
-        super(tileentitytypes);
-        this.items = NonNullList.a(3, ItemStack.a);
-        this.b = new IContainerProperties() {
+    // Tuinity start - pushable TE's
+    protected final IContainerProperties getNewContainerProperties() {
+        // moved from constructor - this should be re-copied if it changes
+        return new IContainerProperties() {
             @Override
             public int getProperty(int i) {
                 switch (i) {
@@ -77,6 +77,22 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
                 return 4;
             }
         };
+    }
+
+    @Override
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        TileEntityFurnace copy = (TileEntityFurnace)super.createCopyForPush(world, oldPos, newPos, blockData);
+
+        copy.setContainerProperties(copy.getNewContainerProperties()); // old properties retains reference to old te
+
+        return copy;
+    }
+    // Tuinity end - pushable TE's
+
+    protected TileEntityFurnace(TileEntityTypes<?> tileentitytypes, Recipes<? extends RecipeCooking> recipes) {
+        super(tileentitytypes);
+        this.items = NonNullList.a(3, ItemStack.a);
+        this.b = this.getNewContainerProperties();
         this.n = Maps.newHashMap();
         this.c = recipes;
     }
diff --git a/src/main/java/net/minecraft/server/TileEntityJukeBox.java b/src/main/java/net/minecraft/server/TileEntityJukeBox.java
index d66d9ff1880ae13c129c5c7e933bf50f885b3f26..470f3108326f5b9fb88a387b426d5959087fc848 100644
--- a/src/main/java/net/minecraft/server/TileEntityJukeBox.java
+++ b/src/main/java/net/minecraft/server/TileEntityJukeBox.java
@@ -4,6 +4,13 @@ public class TileEntityJukeBox extends TileEntity implements Clearable {
 
     private ItemStack a;
 
+    // Tuinity start - pushable TE's
+    @Override
+    public boolean isPushable() {
+        return false; // disabled due to buggy sound
+    }
+    // Tuinity end - pushable TE's
+
     public TileEntityJukeBox() {
         super(TileEntityTypes.JUKEBOX);
         this.a = ItemStack.a;
diff --git a/src/main/java/net/minecraft/server/TileEntityLectern.java b/src/main/java/net/minecraft/server/TileEntityLectern.java
index 6c2b48bdbe2ae09649a483b106e860f4e67ec0ac..c3b854b6a2ced313072b914fe8f5daa987471bc0 100644
--- a/src/main/java/net/minecraft/server/TileEntityLectern.java
+++ b/src/main/java/net/minecraft/server/TileEntityLectern.java
@@ -16,7 +16,7 @@ import org.bukkit.inventory.InventoryHolder;
 public class TileEntityLectern extends TileEntity implements Clearable, ITileInventory, ICommandListener { // CraftBukkit - ICommandListener
 
     // CraftBukkit start - add fields and methods
-    public final IInventory inventory = new LecternInventory();
+    public IInventory inventory = new LecternInventory(); // Tuinity - need non-final for `createCopyForPush`
     public class LecternInventory implements IInventory {
 
         public List<HumanEntity> transaction = new ArrayList<>();
@@ -136,29 +136,48 @@ public class TileEntityLectern extends TileEntity implements Clearable, ITileInv
         @Override
         public void clear() {}
     };
-    private final IContainerProperties containerProperties = new IContainerProperties() {
-        @Override
-        public int getProperty(int i) {
-            return i == 0 ? TileEntityLectern.this.page : 0;
-        }
+    // Tuinity start - pushable TE's
+    private IContainerProperties containerProperties = this.getNewContainerProperties(); // Tuinity - need non-final for `createCopyForPush`
+
+    protected final IContainerProperties getNewContainerProperties() {
+        return new IContainerProperties() {
+            @Override
+            public int getProperty(int i) {
+                return i == 0 ? TileEntityLectern.this.page : 0;
+            }
+
+            @Override
+            public void setProperty(int i, int j) {
+                if (i == 0) {
+                    TileEntityLectern.this.setPage(j);
+                }
 
-        @Override
-        public void setProperty(int i, int j) {
-            if (i == 0) {
-                TileEntityLectern.this.setPage(j);
             }
 
-        }
+            @Override
+            public int a() {
+                return 1;
+            }
+        };
+    }
+    // Tuinity end - pushable TE's
 
-        @Override
-        public int a() {
-            return 1;
-        }
-    };
     private ItemStack book;
     private int page;
     private int maxPage;
 
+    // Tuinity start - pushable TE's
+    @Override
+    public TileEntity createCopyForPush(WorldServer world, BlockPosition oldPos, BlockPosition newPos, IBlockData blockData) {
+        TileEntityLectern copy = (TileEntityLectern)super.createCopyForPush(world, oldPos, newPos, blockData);
+
+        copy.inventory = copy.new LecternInventory();
+        copy.containerProperties = copy.getNewContainerProperties(); // old properties retains reference to old te
+
+        return copy;
+    }
+    // Tuinity end - pushable TE's
+
     public TileEntityLectern() {
         super(TileEntityTypes.LECTERN);
         this.book = ItemStack.a;
diff --git a/src/main/java/net/minecraft/server/TileEntityPiston.java b/src/main/java/net/minecraft/server/TileEntityPiston.java
index d700e8281fe50b1c4131ac260ff6c0d0dd8412f0..bd0ebacf7a97549512445f70f2f290a574042d1e 100644
--- a/src/main/java/net/minecraft/server/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/server/TileEntityPiston.java
@@ -5,10 +5,10 @@ import java.util.List;
 
 public class TileEntityPiston extends TileEntity implements ITickable {
 
-    private IBlockData a;
+    private IBlockData a; protected final IBlockData getBlockData() { return this.a; } // Tuinity - OBFHELPER
     private EnumDirection b;
     private boolean c;
-    private boolean g;
+    private boolean g; protected final boolean isSource() { return this.g; } // Tuinity - OBFHELPER
     private static final ThreadLocal<EnumDirection> h = ThreadLocal.withInitial(() -> {
         return null;
     });
@@ -16,12 +16,27 @@ public class TileEntityPiston extends TileEntity implements ITickable {
     private float j;
     private long k;
 
+    // Tuinity start - pushable TE's
+    private TileEntity tileEntity;
+
+    @Override
+    public boolean isPushable() {
+        return false; // fuck no.
+    }
+    // Tuinity end - pushable TE's
+
     public TileEntityPiston() {
         super(TileEntityTypes.PISTON);
     }
 
     public TileEntityPiston(IBlockData iblockdata, EnumDirection enumdirection, boolean flag, boolean flag1) {
+        // Tuinity start - add tileEntity parameter
+        this(iblockdata, enumdirection, flag, flag1, null);
+    }
+    public TileEntityPiston(IBlockData iblockdata, EnumDirection enumdirection, boolean flag, boolean flag1, TileEntity tileEntity) {
         this();
+        this.tileEntity = tileEntity;
+        // Tuinity end - add tileEntity parameter
         this.a = iblockdata;
         this.b = enumdirection;
         this.c = flag;
@@ -30,7 +45,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
 
     @Override
     public NBTTagCompound b() {
-        return this.save(new NBTTagCompound());
+        return this.save(new NBTTagCompound(), false); // Tuinity - clients don't need the copied tile entity.
     }
 
     public boolean d() {
@@ -257,7 +272,25 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                     iblockdata = Block.b(this.a, (GeneratorAccess) this.world, this.position);
                 }
 
-                this.world.setTypeAndData(this.position, iblockdata, 3);
+                // Tuinity start - pushable TE's
+                if ((iblockdata.isAir() && !this.isSource()) && !this.getBlockData().isAir()) {
+                    // if the block can't exist at the location anymore, we need to fire drops for it, as
+                    // setTypeAndData wont.
+
+                    // careful - the previous pos is moving_piston, which wont fire drops. So we're safe from dupes.
+                    // but the setAir should be before the drop.
+                    this.world.setAir(this.position, false);
+                    Block.dropItems(this.getBlockData(), this.world, this.position, null, null, ItemStack.NULL_ITEM);
+                } else {
+                    // need to set to air before else the setTypeAndData call will create a new TE and override
+                    // the old one
+                    this.world.setTypeAndDataRaw(this.position, Blocks.AIR.getBlockData(), null);
+                    this.world.setTypeAndData(this.position, iblockdata, 3, iblockdata.getBlock() == this.getBlockData().getBlock() ? this.tileEntity : null);
+                }
+                if (this.tileEntity != null && this.world.getType(this.position).getBlock() == this.getBlockData().getBlock()) {
+                    this.tileEntity.onPostPush();
+                }
+                // Tuinity end - pushable TE's
                 this.world.a(this.position, iblockdata.getBlock(), this.position);
             }
         }
@@ -282,7 +315,12 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                         iblockdata = (IBlockData) iblockdata.set(BlockProperties.C, false);
                     }
 
-                    this.world.setTypeAndData(this.position, iblockdata, 67);
+                    // Tuinity start - pushable TE's
+                    this.world.setTypeAndData(this.position, iblockdata, 67, this.tileEntity);
+                    if (this.tileEntity != null && this.world.getType(this.position).getBlock() == this.getBlockData().getBlock()) {
+                        this.tileEntity.onPostPush();
+                    }
+                    // Tuinity end - pushable TE's
                     this.world.a(this.position, iblockdata.getBlock(), this.position);
                 }
             }
@@ -309,16 +347,34 @@ public class TileEntityPiston extends TileEntity implements ITickable {
         this.j = this.i;
         this.c = nbttagcompound.getBoolean("extending");
         this.g = nbttagcompound.getBoolean("source");
+        // Tuinity start - pushable TE's
+        if (nbttagcompound.hasKey("Tuinity.tileEntity")) {
+            NBTTagCompound compound = nbttagcompound.getCompound("Tuinity.tileEntity");
+            if (!compound.isEmpty()) {
+                this.tileEntity = TileEntity.create(compound);
+            }
+        }
+        // Tuinity end - pushable TE's
     }
 
     @Override
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+        // Tuinity start - add saveTile param
+        return this.save(nbttagcompound, true);
+    }
+    public NBTTagCompound save(NBTTagCompound nbttagcompound, boolean saveTile) {
+        // Tuinity end - add saveTile param
         super.save(nbttagcompound);
         nbttagcompound.set("blockState", GameProfileSerializer.a(this.a));
         nbttagcompound.setInt("facing", this.b.b());
         nbttagcompound.setFloat("progress", this.j);
         nbttagcompound.setBoolean("extending", this.c);
         nbttagcompound.setBoolean("source", this.g);
+        // Tuinity start - pushable TE's
+        if (saveTile && this.tileEntity != null) {
+            nbttagcompound.set("Tuinity.tileEntity", this.tileEntity.save(new NBTTagCompound()));
+        }
+        // Tuinity end - pushable TE's
         return nbttagcompound;
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index d9682893746c58eb3d5c3c23182d58c035bcaea8..0aeaf937bdfc5e5119b887230afe54bef3108db2 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -341,8 +341,27 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         }
     }
 
+    // Tuinity start
+    // Does not affect TE. This simply just a raw set type - runs no logic.
+    final void setTypeAndDataRaw(final BlockPosition pos, final IBlockData blockData, final TileEntity tileEntity) {
+        this.getChunkAt(pos.getX() >> 4, pos.getZ() >> 4).setTypeAndDataRaw(pos, blockData);
+        if (tileEntity == null) {
+            this.removeTileEntity(pos);
+        } else {
+            this.setTileEntity(pos, tileEntity);
+        }
+        ((WorldServer)this).getChunkProvider().flagDirty(pos);
+    }
+    // Tuinity end
+
     @Override
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        // Tuinity start - add tileEntity parameter
+        return this.setTypeAndData(blockposition, iblockdata, i, null);
+    }
+    // Up to the caller to handle previous tile state.
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i, TileEntity tileEntity) {
+        // Tuinity end - add tileEntity parameter
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Async set type call"); // Tuinity
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
@@ -376,7 +395,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             }
             // CraftBukkit end
 
-            IBlockData iblockdata1 = chunk.setType(blockposition, iblockdata, (i & 64) != 0, (i & 1024) == 0); // CraftBukkit custom NO_PLACE flag
+            IBlockData iblockdata1 = chunk.setType(blockposition, iblockdata, (i & 64) != 0, (i & 1024) == 0, tileEntity); // CraftBukkit custom NO_PLACE flag // Tuinity - add tileEntity parameter
             this.chunkPacketBlockController.onBlockChange(this, blockposition, iblockdata, iblockdata1, i); // Paper - Anti-Xray
 
             if (iblockdata1 == null) {
@@ -1114,7 +1133,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                     while (iterator.hasNext()) {
                         TileEntity tileentity1 = (TileEntity) iterator.next();
 
-                        if (tileentity1.getPosition().equals(blockposition)) {
+                        if (tileentity != tileentity1 && tileentity1.getPosition().equals(blockposition)) { // Tuinity - don't remove us if we double set...
                             tileentity1.ab_();
                             iterator.remove();
                         }
