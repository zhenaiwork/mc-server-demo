From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sat, 11 Jul 2020 05:09:28 -0700
Subject: [PATCH] Separate lookup locking from state access in UserCache

Prevent lookups from stalling simple state access/write calls

diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 39d2f83531d539fb96824c2e6a9018c12ea75272..07fe1fca0908015d198e982246f74482b4e62d4b 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -62,6 +62,10 @@ public class UserCache {
             return null;
         }
     };
+    // Tuinity start
+    protected final java.util.concurrent.locks.ReentrantLock stateLock = new java.util.concurrent.locks.ReentrantLock();
+    protected final java.util.concurrent.locks.ReentrantLock lookupLock = new java.util.concurrent.locks.ReentrantLock();
+    // Tuinity end
 
     public UserCache(GameProfileRepository gameprofilerepository, File file) {
         this.g = gameprofilerepository;
@@ -109,7 +113,7 @@ public class UserCache {
         this.a(gameprofile, (Date) null);
     }
 
-    private synchronized void a(GameProfile gameprofile, Date date) { // Paper - synchronize
+    private void a(GameProfile gameprofile, Date date) { // Paper - synchronize // Tuinity - allow better concurrency
         UUID uuid = gameprofile.getId();
 
         if (date == null) {
@@ -122,6 +126,7 @@ public class UserCache {
 
         UserCache.UserCacheEntry usercache_usercacheentry = new UserCache.UserCacheEntry(gameprofile, date);
 
+        try { this.stateLock.lock(); // Tuinity - allow better concurrency
         //if (this.e.containsKey(uuid)) { // Paper
             UserCache.UserCacheEntry usercache_usercacheentry1 = (UserCache.UserCacheEntry) this.e.get(uuid);
         if (usercache_usercacheentry1 != null) { // Paper
@@ -133,12 +138,14 @@ public class UserCache {
         this.d.put(gameprofile.getName().toLowerCase(Locale.ROOT), usercache_usercacheentry);
         this.e.put(uuid, usercache_usercacheentry);
         this.f.addFirst(gameprofile);
+        } finally { this.stateLock.unlock(); } // Tuinity - allow better concurrency
         if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
     }
 
     @Nullable
-    public synchronized GameProfile getProfile(String s) { // Paper - synchronize
+    public GameProfile getProfile(String s) { // Paper - synchronize // Tuinity start - allow better concurrency
         String s1 = s.toLowerCase(Locale.ROOT);
+        boolean stateLocked = true; try { this.stateLock.lock(); // Tuinity - allow better concurrency
         UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(s1);
 
         if (usercache_usercacheentry != null && (new Date()).getTime() >= usercache_usercacheentry.c.getTime()) {
@@ -154,8 +161,12 @@ public class UserCache {
             gameprofile = usercache_usercacheentry.a();
             this.f.remove(gameprofile);
             this.f.addFirst(gameprofile);
+            stateLocked = false; this.stateLock.unlock(); // Tuinity - allow better concurrency
         } else {
+            stateLocked = false; this.stateLock.unlock(); // Tuinity - allow better concurrency
+            try { this.lookupLock.lock(); // Tuinity - allow better concurrency
             gameprofile = a(this.g, s); // Spigot - use correct case for offline players
+            } finally { this.lookupLock.unlock(); } // Tuinity - allow better concurrency
             if (gameprofile != null) {
                 this.a(gameprofile);
                 usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(s1);
@@ -164,6 +175,7 @@ public class UserCache {
 
         if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
+        } finally { if (stateLocked) {  this.stateLock.unlock(); } } // Tuinity - allow better concurrency
     }
 
     // Paper start
@@ -263,6 +275,7 @@ public class UserCache {
     }
 
     private List<UserCache.UserCacheEntry> a(int i) {
+        try { this.stateLock.lock(); // Tuinity - allow better concurrency
         List<UserCache.UserCacheEntry> list = Lists.newArrayList();
         List<GameProfile> list1 = Lists.newArrayList(Iterators.limit(this.f.iterator(), i));
         Iterator iterator = list1.iterator();
@@ -277,6 +290,7 @@ public class UserCache {
         }
 
         return list;
+        } finally { this.stateLock.unlock(); } // Tuinity - allow better concurrency
     }
 
     class UserCacheEntry {
